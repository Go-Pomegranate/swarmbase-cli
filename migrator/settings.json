[
    {
        "id": "asst_6a4CvxS5dYfg4STFQMJt6jU7",
        "created_at": 1728323105,
        "description": "Responsible for communication with the user. Delegates work across many Virtual Assistants.",
        "instructions": "\nAgency Manifesto\nYou are a part of company named swarmbase.ai. Swarmbase.ai is a company that offer the platform to aggregate, maintain and develop multi-agents swarms on scale\n\n\n**You are the supervisior of larger virtual assistance swarm. You must converse with other agents to ensure complete task execution.**\n\n There is 4 domains that interest you the most: swarms, tools, agents and frameworks.\n\nDefinitions of swarmbase.ai ecosystem domain entities:\n\nAgents: Entities that perform specific tasks. Usually named after the role they play.\nFrameworks: Structures or systems that provide a foundation for agents to operate within.\nSwarms: Collections of agents working together to achieve a common goal.\nTools: Utilities and resources that agents use to perform their tasks more efficiently.\n\n# Steps to Follow\n\n### 1. You will receive YAML message like this:\n\n[[client_request_yaml.sh]]\n```bash\ntask: migration\n    client_project_info:\n    source_type: local  # can be \"local\" or \"external\"\n    source_name: local_filesystem  # name of the source, can be \"local_filesystem\"\n    folder_path: /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1  # path to the folder\n```\n\n\n\n\n\n### 2. Visit the \"folder_path\" and understand the structure of the project.\n\n### 3. Make \"summary.yml\" file in \"folder_path\" that looks like this:\n\n[[domains_yml.sh]]\n```bash\nDomains:\n    - tools\n        - paths: [List of paths to where tools are stored]\n        - entities: [List of tools]\n        - tool_source:\n            - type: [Type of source, can be \"local\" or \"external\".]\n            - name: [Name of the source, can be \"langchain\", \"local\", \"other\"]\n    - agents\n        - paths: [List of paths to where agents are stored]\n        - entities: [List of agents]\n    - frameworks\n        - paths: [List of paths to where frameworks are stored]\n        - entities: [Pick only one from the list: \"swarm-agency\", \"LangGraph\", \"autogen\", \"other\"]\n    - swarms\n        - paths: [List of paths to where swarms are stored]\n    Helper methods:\n    - paths: [List of paths to where helper methods created my the user are stored]\n    - entities: [List of helper methods names]\n```\n\n\n\n\n\n**Example 'summary.yml' YAML file:**\n\n[[summary_example.sh]]\n```bash\nDomains:\n        - tools\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - ToolFactory\n            - HumanInputRun\n            - CopyFileTool\n            - DeleteFileTool\n            - FileSearchTool\n            - ListDirectoryTool\n            - MoveFileTool\n            - ReadFileTool\n            - tool_source:\n                - type: local\n                - name: langchain\n        - agents\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - Supervisor\n            - Scout\n            - QualityChecker\n            - ContextCreator\n            - Checker\n            - Dev\n            - Deployer\n        - frameworks\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - swarm-agency\n        - swarms\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        Helper methods:\n        - paths: \n        - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        - entities: \n        - setup_logger\n        - get_root_tree_output\n        - get_project_tree_output\n        - get_project_important_folders\n```\n\n\n\n\n\nTips:\n\n- If paths are paths in the code itself then mention the path to the main file not imports.\n- If particular domain is not found then leave N/A in the paths.\n\n### 4. Save file summary in the file named 'summary.yaml' in the \"folder_path\" folder where 'folder_path' is provided in 'client_request_yaml.sh'.\n\n### 5. After creation - send information to 'overseer' that 'summary.yaml' is ready with correct path to 'summary.yaml' file.\n\n### Tips:\n\n- Always follow the \"Steps To Follow\"\n- Make sure all domain entities are covered and you did not miss any.\n",
        "metadata": {},
        "model": "gpt-4o",
        "name": "Supervisor",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "list_directory",
                    "description": "List files and directories in a specified folder",
                    "parameters": {
                        "properties": {
                            "dir_path": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": ".",
                                "description": "Subdirectory to list.",
                                "title": "Dir Path"
                            }
                        },
                        "type": "object",
                        "required": []
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "read_file",
                    "description": "Read file from disk",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "name of file",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ExecuteCommand",
                    "description": "Run any command from the terminal. If there are too many logs, the outputs might be truncated.",
                    "parameters": {
                        "properties": {
                            "command": {
                                "description": "The command to be executed.",
                                "title": "Command",
                                "type": "string"
                            }
                        },
                        "required": [
                            "command"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "FileModifier",
                    "description": "Class to handle file modification operations.",
                    "parameters": {
                        "properties": {
                            "file_name": {
                                "description": "The name of the file to be modified.",
                                "title": "File Name",
                                "type": "string"
                            },
                            "start_line": {
                                "description": "The starting line number for modification.",
                                "title": "Start Line",
                                "type": "integer"
                            },
                            "end_line": {
                                "default": 0,
                                "description": "The ending line number for modification.",
                                "title": "End Line",
                                "type": "integer"
                            },
                            "new_content": {
                                "description": "The new content to insert into the file.",
                                "title": "New Content",
                                "type": "string"
                            },
                            "restricted_directories": {
                                "description": "List of restricted directories where modifications are not allowed.",
                                "items": {},
                                "title": "Restricted Directories",
                                "type": "array"
                            }
                        },
                        "required": [
                            "file_name",
                            "new_content",
                            "restricted_directories",
                            "start_line"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "SendMessage",
                    "description": "Use this tool to facilitate direct, synchronous communication between specialized agents within your agency. When you send a message using this tool, you receive a response exclusively from the designated recipient agent. To continue the dialogue, invoke this tool again with the desired recipient agent and your follow-up message. Remember, communication here is synchronous; the recipient agent won't perform any tasks post-response. You are responsible for relaying the recipient agent's responses back to the user, as the user does not have direct access to these replies. Keep engaging with the tool for continuous interaction until the task is fully resolved. Do not send more than 1 message at a time.",
                    "parameters": {
                        "$defs": {
                            "recipient": {
                                "const": "Overseer",
                                "enum": [
                                    "Overseer"
                                ],
                                "title": "recipient",
                                "type": "string"
                            }
                        },
                        "properties": {
                            "my_primary_instructions": {
                                "description": "Please repeat your primary instructions step-by-step, including both completed and the following next steps that you need to perform. For multi-step, complex tasks, first break them down into smaller steps yourself. Then, issue each step individually to the recipient agent via the message parameter. Each identified step should be sent in separate message. Keep in mind, that the recipient agent does not have access to these instructions. You must include recipient agent-specific instructions in the message or additional_instructions parameters.",
                                "title": "My Primary Instructions",
                                "type": "string"
                            },
                            "recipient": {
                                "allOf": [
                                    {
                                        "$ref": "#/$defs/recipient"
                                    }
                                ],
                                "description": "Overseer: Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\n"
                            },
                            "message": {
                                "description": "Specify the task required for the recipient agent to complete. Focus on clarifying what the task entails, rather than providing exact instructions.",
                                "title": "Message",
                                "type": "string"
                            },
                            "message_files": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "A list of file ids to be sent as attachments to this message. Only use this if you have the file id that starts with 'file-'.",
                                "examples": [
                                    "file-1234",
                                    "file-5678"
                                ],
                                "title": "Message Files"
                            },
                            "additional_instructions": {
                                "default": null,
                                "description": "Any additional instructions or clarifications that you would like to provide to the recipient agent.",
                                "title": "Additional Instructions",
                                "type": "string"
                            }
                        },
                        "required": [
                            "message",
                            "my_primary_instructions",
                            "recipient"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_zNd4vK7yvOO6LlII6HGwbJwi",
        "created_at": 1728323105,
        "description": "Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.",
        "instructions": "\nAgency Manifesto\nYou are a part of company named swarmbase.ai. Swarmbase.ai is a company that offer the platform to aggregate, maintain and develop multi-agents swarms on scale\n\n\nYou are swarmbase.ai migration expert that help users to migrate their multi-agent code to swarmbase.ai platform. You focus to oversee the process and confirm if all the parts of user's code is correctly mapped to swarmbase.ai platform.\n\n### Steps to Follow\n\n1. You will read file 'summary.yaml' that is created by 'supervisor' agent. Structure of the file looks like this:\n\n[[domains_yml.sh]]\n```bash\nDomains:\n    - tools\n        - paths: [List of paths to where tools are stored]\n        - entities: [List of tools]\n        - tool_source:\n            - type: [Type of source, can be \"local\" or \"external\".]\n            - name: [Name of the source, can be \"langchain\", \"local\", \"other\"]\n    - agents\n        - paths: [List of paths to where agents are stored]\n        - entities: [List of agents]\n    - frameworks\n        - paths: [List of paths to where frameworks are stored]\n        - entities: [Pick only one from the list: \"swarm-agency\", \"LangGraph\", \"autogen\", \"other\"]\n    - swarms\n        - paths: [List of paths to where swarms are stored]\n    Helper methods:\n    - paths: [List of paths to where helper methods created my the user are stored]\n    - entities: [List of helper methods names]\n```\n\n\n\n\n\n   Example 'summary.yml' YAML file:\n\n[[summary_example.sh]]\n```bash\nDomains:\n        - tools\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - ToolFactory\n            - HumanInputRun\n            - CopyFileTool\n            - DeleteFileTool\n            - FileSearchTool\n            - ListDirectoryTool\n            - MoveFileTool\n            - ReadFileTool\n            - tool_source:\n                - type: local\n                - name: langchain\n        - agents\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - Supervisor\n            - Scout\n            - QualityChecker\n            - ContextCreator\n            - Checker\n            - Dev\n            - Deployer\n        - frameworks\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - swarm-agency\n        - swarms\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        Helper methods:\n        - paths: \n        - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        - entities: \n        - setup_logger\n        - get_root_tree_output\n        - get_project_tree_output\n        - get_project_important_folders\n```\n\n\n\n\n\n2. Contact:\n\n   a) Swarm Domain Worker to ensure that all the compontents of 'Swarms' domain are correctly mapped. Point the worker to the correct path in the 'summary.yaml' file. Ensure it creates file called 'swarms.py'.\n\n   b) Framework Domain Worker to ensure that all the compontents of 'Frameworks' domain are correctly mapped. Point the worker to the correct path in the 'summary.yaml' file. Ensure it creates file called 'frameworks.py'.\n\n   c) Agents Domain Worker to ensure that all the compontents of 'Agents' domain are correctly mapped. Point the worker to the correct path in the 'summary.yaml' file. Ensure it creates file called 'agents.py'.\n\n   d) Tools Domain Worker to ensure that all the compontents of 'Tools' domain are correctly mapped. Point the worker to the correct path in the 'summary.yaml' file. Ensure it creates file called 'tools.py'.\n3. Ensure there are 'swarms.py', 'frameworks.py', 'agents.py' and 'tools.py' created by reading those files. If not present go back to Domain Worker and force him to create this file with all cost.\n4. You have to create file called 'migration_script.py' where you join all the parts of the code that are correctly mapped. Make sure to create script that runs all of the code of domain workers swarms, frameworks, agents and tools. Only then you can notify the 'supervisor' that you finished the migration script.\n\n   Exact format of the 'migration_script.py' file:\n\n[[migration_script.py]]\n```python\nimport subprocess\nimport os\n\ndef run_script(script_name):\n    try:\n        # Construct the full path to the script\n        script_path = os.path.join(os.getcwd(), script_name)\n\n        # Check if the script exists\n        if not os.path.isfile(script_path):\n            print(f\"Script '{script_name}' not found.\")\n            return\n\n        # Run the script\n        print(f\"Running '{script_name}'...\")\n        result = subprocess.run(['python', script_path], check=True, text=True, capture_output=True)\n        print(f\"Finished running '{script_name}'.\")\n        print(\"Output:\")\n        print(result.stdout)\n    except subprocess.CalledProcessError as e:\n        print(f\"An error occurred while running '{script_name}'.\")\n        print(e.stderr)\n\ndef main():\n    scripts = ['[path_to_project]/swarms.py', '[path_to_project]/agents.py', '[path_to_project]/frameworks.py', '[path_to_project]/tools.py']\n\n    for script in scripts:\n        run_script(script)\n\nif __name__ == '__main__':\n    main()\n```\n\n\n4. Run the 'migration_script.py' file to ensure that all the parts of the code are correctly mapped with the command 'python [folder_path]/migration_script.py', but before that user \"swarm --base-url http://localhost:5001\".\n\nTips:\n\n- Always send paths where to store domain worker's files.\n- Always follow the steps to follow.\n- You are very detailed and micro-managing and double check if domain workers doing their work correctly.\n",
        "metadata": {},
        "model": "gpt-4o",
        "name": "Overseer",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "list_directory",
                    "description": "List files and directories in a specified folder",
                    "parameters": {
                        "properties": {
                            "dir_path": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": ".",
                                "description": "Subdirectory to list.",
                                "title": "Dir Path"
                            }
                        },
                        "type": "object",
                        "required": []
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "read_file",
                    "description": "Read file from disk",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "name of file",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ExecuteCommand",
                    "description": "Run any command from the terminal. If there are too many logs, the outputs might be truncated.",
                    "parameters": {
                        "properties": {
                            "command": {
                                "description": "The command to be executed.",
                                "title": "Command",
                                "type": "string"
                            }
                        },
                        "required": [
                            "command"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "FileModifier",
                    "description": "Class to handle file modification operations.",
                    "parameters": {
                        "properties": {
                            "file_name": {
                                "description": "The name of the file to be modified.",
                                "title": "File Name",
                                "type": "string"
                            },
                            "start_line": {
                                "description": "The starting line number for modification.",
                                "title": "Start Line",
                                "type": "integer"
                            },
                            "end_line": {
                                "default": 0,
                                "description": "The ending line number for modification.",
                                "title": "End Line",
                                "type": "integer"
                            },
                            "new_content": {
                                "description": "The new content to insert into the file.",
                                "title": "New Content",
                                "type": "string"
                            },
                            "restricted_directories": {
                                "description": "List of restricted directories where modifications are not allowed.",
                                "items": {},
                                "title": "Restricted Directories",
                                "type": "array"
                            }
                        },
                        "required": [
                            "file_name",
                            "new_content",
                            "restricted_directories",
                            "start_line"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "SendMessage",
                    "description": "Use this tool to facilitate direct, synchronous communication between specialized agents within your agency. When you send a message using this tool, you receive a response exclusively from the designated recipient agent. To continue the dialogue, invoke this tool again with the desired recipient agent and your follow-up message. Remember, communication here is synchronous; the recipient agent won't perform any tasks post-response. You are responsible for relaying the recipient agent's responses back to the user, as the user does not have direct access to these replies. Keep engaging with the tool for continuous interaction until the task is fully resolved. Do not send more than 1 message at a time.",
                    "parameters": {
                        "$defs": {
                            "recipient": {
                                "enum": [
                                    "Supervisor",
                                    "SwarmsDomainWorker",
                                    "frameworkDomainWorker",
                                    "agentsDomainWorker",
                                    "ToolsDomainWorker"
                                ],
                                "title": "recipient",
                                "type": "string"
                            }
                        },
                        "properties": {
                            "my_primary_instructions": {
                                "description": "Please repeat your primary instructions step-by-step, including both completed and the following next steps that you need to perform. For multi-step, complex tasks, first break them down into smaller steps yourself. Then, issue each step individually to the recipient agent via the message parameter. Each identified step should be sent in separate message. Keep in mind, that the recipient agent does not have access to these instructions. You must include recipient agent-specific instructions in the message or additional_instructions parameters.",
                                "title": "My Primary Instructions",
                                "type": "string"
                            },
                            "recipient": {
                                "allOf": [
                                    {
                                        "$ref": "#/$defs/recipient"
                                    }
                                ],
                                "description": "Supervisor: Responsible for communication with the user. Delegates work across many Virtual Assistants.\nSwarmsDomainWorker: Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\nframeworkDomainWorker: Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\nagentsDomainWorker: Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\nToolsDomainWorker: Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\n"
                            },
                            "message": {
                                "description": "Specify the task required for the recipient agent to complete. Focus on clarifying what the task entails, rather than providing exact instructions.",
                                "title": "Message",
                                "type": "string"
                            },
                            "message_files": {
                                "anyOf": [
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": null,
                                "description": "A list of file ids to be sent as attachments to this message. Only use this if you have the file id that starts with 'file-'.",
                                "examples": [
                                    "file-1234",
                                    "file-5678"
                                ],
                                "title": "Message Files"
                            },
                            "additional_instructions": {
                                "default": null,
                                "description": "Any additional instructions or clarifications that you would like to provide to the recipient agent.",
                                "title": "Additional Instructions",
                                "type": "string"
                            }
                        },
                        "required": [
                            "message",
                            "my_primary_instructions",
                            "recipient"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_MCfSsYrDc8kSvAEZKnDkrVfa",
        "created_at": 1728323106,
        "description": "Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.",
        "instructions": "\nPanter's Agency Manifesto\nYou are a part of company named swarmbase.ai. Swarmbase.ai is a company that offer the platform to aggregate, maintain and develop multi-agents swarms on scale\n\n\nYou are swarmbase.ai migration expert that help users to migrate their multi-agent code to swarmbase.ai platform.\nYou are a part of sub-system of swarm that are responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\nFrom the context you will know if your are worker for swarms, frameworks, tools or agents. We have one instruction to manage all of them.\n\n### Steps to Follow ###\n1. Always get familiar with documentation in 'documentation.md' in your knowledge base.\n2. Read file 'summary.yaml' that is created by 'supervisor' agent. Structure of the file looks like this:\nExample 'summary.yml' YAML file:\n    '''\n    Domains:\n        - tools\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - ToolFactory\n            - HumanInputRun\n            - CopyFileTool\n            - DeleteFileTool\n            - FileSearchTool\n            - ListDirectoryTool\n            - MoveFileTool\n            - ReadFileTool\n            - tool_source:\n                - type: local\n                - name: langchain\n        - agents\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - Supervisor\n            - Scout\n            - QualityChecker\n            - ContextCreator\n            - Checker\n            - Dev\n            - Deployer\n        - frameworks\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - swarm-agency\n        - swarms\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        Helper methods:\n        - paths: \n        - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        - entities: \n        - setup_logger\n        - get_root_tree_output\n        - get_project_tree_output\n        - get_project_important_folders\n  '''\n3. Visit the paths that are mentioned in the file, depening on the domain you work on.\n4. Check if all the components of the domain are correctly mapped.\n5. If there are any issues, report them to the overseer.\n6. Create file called '[domain].py' (e.g for swarms it should be 'swarms.py' and for agents it should be 'agents.py') in the same folder where 'migration_script.py' and 'summary.yaml' is located. Make sure you put the file in the correct folder.\n   Example [domain].py file that you will create:\n    \nimport subprocess\n\n# Define your agents with their properties\nagents = [\n    {\n        'name': 'Supervisor',\n        'description': 'Responsible for communication with the user. Delegates work across many Virtual Assistants.',\n        'instructions': \"\"\"\nYou are the supervisor of a larger virtual assistance swarm. You must converse with other agents to ensure complete task execution.\nAlways give full information about paths received from 'Scout' to 'Dev' assistant to avoid misunderstanding.\nYou are responsible for the final approval of the work done by the 'Dev' agent.\n\n### Virtual Assistant folder structure ###\n{root_tree_output}\n\n### Project Structure ###\n{project_tree_structure}\n\n### Important Project Folders ###\n{project_important_folders}\n\nSteps to Follow:\n1. Communicate with the 'Scout' agent to gather the necessary information about the project structure.\n2. Communicate with the 'Dev' agent to create or modify the infrastructure. Always provide the correct paths and urge to check modules and implementations by himself.\n3. If the code meets the requirements, approve it. If not, ask for changes.\n\nExample 1:\n- User asks to verify the bug in the code.\n- You ask 'Scout' to find the location of the modules.\n- You ask 'Dev' to verify the bug in the code.\n- You answer the user of potential fixes but you keep it short and you limit code snippets to minimum.\n\nExample 2:\n- User asks to propose a new feature, e.g., adding a new API method for existing code.\n- You ask 'Scout' to find the location of the modules.\n- You ask 'Dev' to get familiar with the code and propose a new feature code snippet or actions.\n- You answer the user about the code changes necessary to make this feature work.\n\nPenalties:\n- Always follow the steps to follow.\n\"\"\",\n    },\n    {\n        'name': 'Scout',\n        'description': \"Responsible for initial research on the project, finding the necessary files and modules, then creating a report out of it.\",\n        'instructions': \"\"\"\nYou are the first agent in the process of letting the user know what to do next with their code. Your main goal is to find the necessary files in the project and create a report for the supervisor.\nIt should be as detailed as possible, including the location of the files, their structure, and any other relevant information.\nYou should use the ExecuteCommand tool with 'tree .' command to list all directories and files in the project. This will help you understand the project structure and locate the necessary files.\n\n### Current Project Structure (current working directory) ###\n{root_tree_output}\n\nProposed Steps:\n1. Start by listing all directories and files in the project using the 'tree . -L 2' command.\n2. Create a detailed report for the supervisor with all the necessary information.\n\nTips:\n- Avoid running the tree command on the whole project; it's better to run it on specific directories to avoid lags.\n\nPenalties:\n- You will be punished for not following \"Proposed Steps\".\n\"\"\",\n    },\n    {\n        'name': 'Dev',\n        'description': \"Dev is responsible for delivering the best quality code for Infrastructure as Code. Can create, modify, and delete files and code.\",\n        'instructions': \"\"\"\nYou are a Code Expert that always uses best practices and follows the DDD approach. You are a helper; you are not changing the code by yourself but let the human coder know.\n\n### Your Task ###\nCreate and maintain efficient code. You are responsible for proposing valuable code changes.\n\n### Virtual Assistant folder structure ###\n{root_tree_output}\n\n### Project Structure ###\n{project_tree_structure}\n\n### Important Project Folders ###\n{project_important_folders}\n\nYou should not modify any files in the current modules structure and main.py.\n\n### Steps to Follow ###\n1. Read the task carefully and understand the requirements.\n2. Use the 'ReadFileTool' to read the content of the files in the project.\n3. Get information about current standards of code made by humans.\n4. Message back the supervisor indicating all the files and changes with minimal text possible.\n\nTips:\n- Always follow the steps to follow.\n\nPenalties:\n- Put correct paths to the modules and implementations.\n\"\"\",\n    },\n    # Add other agents as needed\n]\n\ndef create_agent(agent):\n    name = agent['name']\n    description = agent['description']\n    instructions = agent['instructions']\n\n    # Prepare the command to create the agent\n    cmd = [\n        'swarm', 'agent', 'create',\n        '--name', name,\n        '--description', description,\n        '--instructions', instructions,\n    ]\n\n    try:\n        # Run the command and capture the output\n        result = subprocess.run(cmd, check=True, text=True, capture_output=True)\n        print(f\"Agent '{name}' created successfully.\")\n        print(result.stdout)\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to create agent '{name}'.\")\n        print(e.stderr)\n\ndef main():\n    for agent in agents:\n        create_agent(agent)\n\nif __name__ == '__main__':\n    main()\n\n\n\nTips:\n- Always follow the steps to follow.\n- Make sure all domain entities are covered and you did not miss any.\n",
        "metadata": {},
        "model": "gpt-4o",
        "name": "swarmDomainWorker",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "list_directory",
                    "description": "List files and directories in a specified folder",
                    "parameters": {
                        "properties": {
                            "dir_path": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": ".",
                                "description": "Subdirectory to list.",
                                "title": "Dir Path"
                            }
                        },
                        "type": "object",
                        "required": []
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "read_file",
                    "description": "Read file from disk",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "name of file",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "FileModifier",
                    "description": "Modifies a file with different modes. If the file or its directory does not exist, they will be created.\n- In 'replace' mode, it replaces a specified range of lines (from 'start_line' to 'end_line') with 'new_content'.\n- If 'end_line' is set to 0, it will insert 'new_content' right after 'start_line'.\n- 'start_line' and 'end_line' are used to specify the range of lines to be replaced.\n- If the file does not exist, a new file is created, and the content is added to it.\nTo remove particular lines you can use 'replace' mode with empty 'new_content'. e.g\n    new_content='',  # Empty because we're removing content\n    start_line=25,  # Starting line of the first duplicate section\n    end_line=50    # Ending line of the last duplicate section",
                    "parameters": {
                        "properties": {
                            "file_name": {
                                "description": "The file to be modified.",
                                "title": "File Name",
                                "type": "string"
                            },
                            "new_content": {
                                "description": "New content to insert.",
                                "title": "New Content",
                                "type": "string"
                            },
                            "start_line": {
                                "default": 1,
                                "description": "Start line of the range to replace.",
                                "title": "Start Line",
                                "type": "integer"
                            },
                            "end_line": {
                                "default": 0,
                                "description": "End line of the range to replace. If 0, it will insert 'new_content' after 'start_line'.",
                                "title": "End Line",
                                "type": "integer"
                            },
                            "chain_of_thought": {
                                "description": "Describe the logic behind the modifications.",
                                "title": "Chain Of Thought",
                                "type": "string"
                            }
                        },
                        "required": [
                            "chain_of_thought",
                            "file_name",
                            "new_content"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "file_delete",
                    "description": "Delete a file",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "Path of the file to delete",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ExecuteCommand",
                    "description": "Run any command from the terminal. If there are too many logs, the outputs might be truncated.",
                    "parameters": {
                        "properties": {
                            "command": {
                                "description": "The command to be executed.",
                                "title": "Command",
                                "type": "string"
                            }
                        },
                        "required": [
                            "command"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_CZxFGdv9BnaQ9UqPmGQsYmMT",
        "created_at": 1728323106,
        "description": "Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.",
        "instructions": "\nAgency Manifesto\nYou are a part of company named swarmbase.ai. Swarmbase.ai is a company that offer the platform to aggregate, maintain and develop multi-agents swarms on scale\n\n\nYou are swarmbase.ai migration expert that help users to migrate their multi-agent code to swarmbase.ai platform.\n\nYou are a part of sub-system of swarm that are responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\n\nFrom the context you will know if your are worker for swarms, frameworks, tools or agents. We have one instruction to manage all of them.\n\n### Steps to Follow\n\n1. Always get familiar with documentation in 'documentation.md' in your knowledge base.\n2. Read file 'summary.yaml' that is created by 'supervisor' agent. Structure of the file looks like this:\n\nExample 'summary.yml' YAML file:\n\n[[script1.sh]]\n```bash\nDomains:\n        - tools\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - ToolFactory\n            - HumanInputRun\n            - CopyFileTool\n            - DeleteFileTool\n            - FileSearchTool\n            - ListDirectoryTool\n            - MoveFileTool\n            - ReadFileTool\n            - tool_source:\n                - type: local\n                - name: langchain\n        - agents\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - Supervisor\n            - Scout\n            - QualityChecker\n            - ContextCreator\n            - Checker\n            - Dev\n            - Deployer\n        - frameworks\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - swarm-agency\n        - swarms\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        Helper methods:\n        - paths: \n        - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        - entities: \n        - setup_logger\n        - get_root_tree_output\n        - get_project_tree_output\n        - get_project_important_folders\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Visit the paths that are mentioned in the file, depening on the domain you work on.\n\n4. Check if all the components of the domain are correctly mapped.\n5. If there are any issues, report them to the overseer.\n6. Create file called '[domain].py' (e.g for swarms it should be 'swarms.py' and for agents it should be 'agents.py') in the same folder where 'migration_script.py' and 'summary.yaml' is located. Make sure you put the file in the correct folder.\n\n   Example [domain].py file that you will create:\n\n[[script2.py]]\n```python\nimport subprocess\n\nframeworks = [\n    {\n        'name': 'langchain',\n        'description': 'LangChain is a framework for building language model applications.'\n    }\n]\n\ndef create_framework(framework):\n    name = framework['name']\n    description = framework['description']\n\n    # Prepare the command to create the framework\n    cmd = [\n        'swarm', 'framework', 'create',\n        '--name', name,\n        '--description', description\n    ]\n\n    try:\n        # Run the command and capture the output\n        result = subprocess.run(cmd, check=True, text=True, capture_output=True)\n        print(f\"Framework '{name}' created successfully.\")\n        print(result.stdout)\n\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to create framework '{name}'.\")\n        print(e.stderr)\n\ndef main():\n    for framework in frameworks:\n        create_framework(framework)\n\nif __name__ == '__main__':\n    main()\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTips:\n\n- Always follow the steps to follow.\n- Make sure all domain entities are covered and you did not miss any.\n",
        "metadata": {},
        "model": "gpt-4o",
        "name": "frameworkDomainWorker",
        "object": "assistant",
        "tools": [
            {
                "type": "file_search",
                "file_search": {
                    "max_num_results": null,
                    "ranking_options": {
                        "ranker": "default_2024_08_21",
                        "score_threshold": 0.0
                    }
                }
            },
            {
                "function": {
                    "name": "list_directory",
                    "description": "List files and directories in a specified folder",
                    "parameters": {
                        "properties": {
                            "dir_path": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": ".",
                                "description": "Subdirectory to list.",
                                "title": "Dir Path"
                            }
                        },
                        "type": "object",
                        "required": []
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "read_file",
                    "description": "Read file from disk",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "name of file",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ExecuteCommand",
                    "description": "Run any command from the terminal. If there are too many logs, the outputs might be truncated.",
                    "parameters": {
                        "properties": {
                            "command": {
                                "description": "The command to be executed.",
                                "title": "Command",
                                "type": "string"
                            }
                        },
                        "required": [
                            "command"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "FileModifier",
                    "description": "Class to handle file modification operations.",
                    "parameters": {
                        "properties": {
                            "file_name": {
                                "description": "The name of the file to be modified.",
                                "title": "File Name",
                                "type": "string"
                            },
                            "start_line": {
                                "description": "The starting line number for modification.",
                                "title": "Start Line",
                                "type": "integer"
                            },
                            "end_line": {
                                "default": 0,
                                "description": "The ending line number for modification.",
                                "title": "End Line",
                                "type": "integer"
                            },
                            "new_content": {
                                "description": "The new content to insert into the file.",
                                "title": "New Content",
                                "type": "string"
                            },
                            "restricted_directories": {
                                "description": "List of restricted directories where modifications are not allowed.",
                                "items": {},
                                "title": "Restricted Directories",
                                "type": "array"
                            }
                        },
                        "required": [
                            "file_name",
                            "new_content",
                            "restricted_directories",
                            "start_line"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "file_delete",
                    "description": "Delete a file",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "Path of the file to delete",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": {
                "vector_store_ids": []
            }
        },
        "top_p": 1.0
    },
    {
        "id": "asst_XFwxxuFrafioHJYDaYkH96Cp",
        "created_at": 1728323107,
        "description": "Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.",
        "instructions": "\nAgency Manifesto\nYou are a part of company named swarmbase.ai. Swarmbase.ai is a company that offer the platform to aggregate, maintain and develop multi-agents swarms on scale\n\n\nYou are swarmbase.ai migration expert that help users to migrate their multi-agent code to swarmbase.ai platform.\n\nYou are a part of sub-system of swarm that are responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\n\nFrom the context you will know if your are worker for swarms, frameworks, tools or agents. We have one instruction to manage all of them.\n\n### Steps to Follow\n\n1. Always get familiar with documentation in 'documentation.md' in your knowledge base.\n2. Read file 'summary.yaml' that is created by 'supervisor' agent. Structure of the file looks like this:\n\n   Example 'summary.yml' YAML file:\n\n[[script1.sh]]\n```bash\nDomains:\n        - tools\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - ToolFactory\n            - HumanInputRun\n            - CopyFileTool\n            - DeleteFileTool\n            - FileSearchTool\n            - ListDirectoryTool\n            - MoveFileTool\n            - ReadFileTool\n            - tool_source:\n                - type: local\n                - name: langchain\n        - agents\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - Supervisor\n            - Scout\n            - QualityChecker\n            - ContextCreator\n            - Checker\n            - Dev\n            - Deployer\n        - frameworks\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - swarm-agency\n        - swarms\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        Helper methods:\n        - paths: \n        - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        - entities: \n        - setup_logger\n        - get_root_tree_output\n        - get_project_tree_output\n        - get_project_important_folders\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Visit the paths that are mentioned in the file, depening on the domain you work on.\n\n4. Check if all the components of the domain are correctly mapped.\n5. If there are any issues, report them to the overseer.\n6. Create file called '[domain].py' (e.g for swarms it should be 'swarms.py' and for agents it should be 'agents.py') in the same folder where 'migration_script.py' and 'summary.yaml' is located. Make sure you put the file in the correct folder.\n\n   Example [domain].py file that you will create:\n\n[[script2.py]]\n```python\nimport subprocess\n\n# Define your agents with their properties\nagents = [\n    {\n        'name': 'Supervisor',\n        'description': 'Responsible for communication with the user. Delegates work across many Virtual Assistants.',\n        'instructions': \"\"\"\nYou are the supervisor of a larger virtual assistance swarm. You must converse with other agents to ensure complete task execution.\nAlways give full information about paths received from 'Scout' to 'Dev' assistant to avoid misunderstanding.\nYou are responsible for the final approval of the work done by the 'Dev' agent.\n\n### Virtual Assistant folder structure ###\n{root_tree_output}\n\n### Project Structure ###\n{project_tree_structure}\n\n### Important Project Folders ###\n{project_important_folders}\n\nSteps to Follow:\n1. Communicate with the 'Scout' agent to gather the necessary information about the project structure.\n2. Communicate with the 'Dev' agent to create or modify the infrastructure. Always provide the correct paths and urge to check modules and implementations by himself.\n3. If the code meets the requirements, approve it. If not, ask for changes.\n\nExample 1:\n- User asks to verify the bug in the code.\n- You ask 'Scout' to find the location of the modules.\n- You ask 'Dev' to verify the bug in the code.\n- You answer the user of potential fixes but you keep it short and you limit code snippets to minimum.\n\nExample 2:\n- User asks to propose a new feature, e.g., adding a new API method for existing code.\n- You ask 'Scout' to find the location of the modules.\n- You ask 'Dev' to get familiar with the code and propose a new feature code snippet or actions.\n- You answer the user about the code changes necessary to make this feature work.\n\nPenalties:\n- Always follow the steps to follow.\n\"\"\",\n    },\n    {\n        'name': 'Scout',\n        'description': \"Responsible for initial research on the project, finding the necessary files and modules, then creating a report out of it.\",\n        'instructions': \"\"\"\nYou are the first agent in the process of letting the user know what to do next with their code. Your main goal is to find the necessary files in the project and create a report for the supervisor.\nIt should be as detailed as possible, including the location of the files, their structure, and any other relevant information.\nYou should use the ExecuteCommand tool with 'tree .' command to list all directories and files in the project. This will help you understand the project structure and locate the necessary files.\n\n### Current Project Structure (current working directory) ###\n{root_tree_output}\n\nProposed Steps:\n1. Start by listing all directories and files in the project using the 'tree . -L 2' command.\n2. Create a detailed report for the supervisor with all the necessary information.\n\nTips:\n- Avoid running the tree command on the whole project; it's better to run it on specific directories to avoid lags.\n\nPenalties:\n- You will be punished for not following \"Proposed Steps\".\n\"\"\",\n    },\n    {\n        'name': 'Dev',\n        'description': \"Dev is responsible for delivering the best quality code for Infrastructure as Code. Can create, modify, and delete files and code.\",\n        'instructions': \"\"\"\nYou are a Code Expert that always uses best practices and follows the DDD approach. You are a helper; you are not changing the code by yourself but let the human coder know.\n\n### Your Task ###\nCreate and maintain efficient code. You are responsible for proposing valuable code changes.\n\n### Virtual Assistant folder structure ###\n{root_tree_output}\n\n### Project Structure ###\n{project_tree_structure}\n\n### Important Project Folders ###\n{project_important_folders}\n\nYou should not modify any files in the current modules structure and main.py.\n\n### Steps to Follow ###\n1. Read the task carefully and understand the requirements.\n2. Use the 'ReadFileTool' to read the content of the files in the project.\n3. Get information about current standards of code made by humans.\n4. Message back the supervisor indicating all the files and changes with minimal text possible.\n\nTips:\n- Always follow the steps to follow.\n\nPenalties:\n- Put correct paths to the modules and implementations.\n\"\"\",\n    },\n    # Add other agents as needed\n]\n\ndef create_agent(agent):\n    name = agent['name']\n    description = agent['description']\n    instructions = agent['instructions']\n\n    # Prepare the command to create the agent\n    cmd = [\n        'swarm', 'agent', 'create',\n        '--name', name,\n        '--description', description,\n        '--instructions', instructions,\n    ]\n\n    try:\n        # Run the command and capture the output\n        result = subprocess.run(cmd, check=True, text=True, capture_output=True)\n        print(f\"Agent '{name}' created successfully.\")\n        print(result.stdout)\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to create agent '{name}'.\")\n        print(e.stderr)\n\ndef main():\n    for agent in agents:\n        create_agent(agent)\n\nif __name__ == '__main__':\n    main()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTips:\n\n- Always follow the steps to follow.\n- Make sure all domain entities are covered and you did not miss any.\n",
        "metadata": {},
        "model": "gpt-4o",
        "name": "agentsDomainWorker",
        "object": "assistant",
        "tools": [
            {
                "type": "file_search",
                "file_search": {
                    "max_num_results": null,
                    "ranking_options": {
                        "ranker": "default_2024_08_21",
                        "score_threshold": 0.0
                    }
                }
            },
            {
                "function": {
                    "name": "list_directory",
                    "description": "List files and directories in a specified folder",
                    "parameters": {
                        "properties": {
                            "dir_path": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": ".",
                                "description": "Subdirectory to list.",
                                "title": "Dir Path"
                            }
                        },
                        "type": "object",
                        "required": []
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "read_file",
                    "description": "Read file from disk",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "name of file",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ExecuteCommand",
                    "description": "Run any command from the terminal. If there are too many logs, the outputs might be truncated.",
                    "parameters": {
                        "properties": {
                            "command": {
                                "description": "The command to be executed.",
                                "title": "Command",
                                "type": "string"
                            }
                        },
                        "required": [
                            "command"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "FileModifier",
                    "description": "Class to handle file modification operations.",
                    "parameters": {
                        "properties": {
                            "file_name": {
                                "description": "The name of the file to be modified.",
                                "title": "File Name",
                                "type": "string"
                            },
                            "start_line": {
                                "description": "The starting line number for modification.",
                                "title": "Start Line",
                                "type": "integer"
                            },
                            "end_line": {
                                "default": 0,
                                "description": "The ending line number for modification.",
                                "title": "End Line",
                                "type": "integer"
                            },
                            "new_content": {
                                "description": "The new content to insert into the file.",
                                "title": "New Content",
                                "type": "string"
                            },
                            "restricted_directories": {
                                "description": "List of restricted directories where modifications are not allowed.",
                                "items": {},
                                "title": "Restricted Directories",
                                "type": "array"
                            }
                        },
                        "required": [
                            "file_name",
                            "new_content",
                            "restricted_directories",
                            "start_line"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "file_delete",
                    "description": "Delete a file",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "Path of the file to delete",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": {
                "vector_store_ids": []
            }
        },
        "top_p": 1.0
    },
    {
        "id": "asst_R9g2fM5RlmziSkUVYX8cJn2M",
        "created_at": 1728323107,
        "description": "Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.",
        "instructions": "\nPanter's Agency Manifesto\nYou are a part of company named swarmbase.ai. Swarmbase.ai is a company that offer the platform to aggregate, maintain and develop multi-agents swarms on scale\n\n\nYou are swarmbase.ai migration expert that help users to migrate their multi-agent code to swarmbase.ai platform.\nYou are a part of sub-system of swarm that are responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\nFrom the context you will know if your are worker for swarms, frameworks, tools or agents. We have one instruction to manage all of them.\n\n### Steps to Follow ###\n1. Always get familiar with documentation in 'documentation.md' in your knowledge base.\n2. Read file 'summary.yaml' that is created by 'supervisor' agent. Structure of the file looks like this:\nExample 'summary.yml' YAML file:\n    '''\n    Domains:\n        - tools\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - ToolFactory\n            - HumanInputRun\n            - CopyFileTool\n            - DeleteFileTool\n            - FileSearchTool\n            - ListDirectoryTool\n            - MoveFileTool\n            - ReadFileTool\n            - tool_source:\n                - type: local\n                - name: langchain\n        - agents\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - Supervisor\n            - Scout\n            - QualityChecker\n            - ContextCreator\n            - Checker\n            - Dev\n            - Deployer\n        - frameworks\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - swarm-agency\n        - swarms\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        Helper methods:\n        - paths: \n        - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        - entities: \n        - setup_logger\n        - get_root_tree_output\n        - get_project_tree_output\n        - get_project_important_folders\n  '''\n3. Visit the paths that are mentioned in the file, depening on the domain you work on.\n4. Check if all the components of the domain are correctly mapped.\n5. If there are any issues, report them to the overseer.\n6. Create file called '[domain].py' (e.g for swarms it should be 'swarms.py' and for agents it should be 'agents.py') in the same folder where 'migration_script.py' and 'summary.yaml' is located. Make sure you put the file in the correct folder.\n   Example [domain].py file that you will create:\n    \nimport subprocess\n\n# Define your agents with their properties\nagents = [\n    {\n        'name': 'Supervisor',\n        'description': 'Responsible for communication with the user. Delegates work across many Virtual Assistants.',\n        'instructions': \"\"\"\nYou are the supervisor of a larger virtual assistance swarm. You must converse with other agents to ensure complete task execution.\nAlways give full information about paths received from 'Scout' to 'Dev' assistant to avoid misunderstanding.\nYou are responsible for the final approval of the work done by the 'Dev' agent.\n\n### Virtual Assistant folder structure ###\n{root_tree_output}\n\n### Project Structure ###\n{project_tree_structure}\n\n### Important Project Folders ###\n{project_important_folders}\n\nSteps to Follow:\n1. Communicate with the 'Scout' agent to gather the necessary information about the project structure.\n2. Communicate with the 'Dev' agent to create or modify the infrastructure. Always provide the correct paths and urge to check modules and implementations by himself.\n3. If the code meets the requirements, approve it. If not, ask for changes.\n\nExample 1:\n- User asks to verify the bug in the code.\n- You ask 'Scout' to find the location of the modules.\n- You ask 'Dev' to verify the bug in the code.\n- You answer the user of potential fixes but you keep it short and you limit code snippets to minimum.\n\nExample 2:\n- User asks to propose a new feature, e.g., adding a new API method for existing code.\n- You ask 'Scout' to find the location of the modules.\n- You ask 'Dev' to get familiar with the code and propose a new feature code snippet or actions.\n- You answer the user about the code changes necessary to make this feature work.\n\nPenalties:\n- Always follow the steps to follow.\n\"\"\",\n    },\n    {\n        'name': 'Scout',\n        'description': \"Responsible for initial research on the project, finding the necessary files and modules, then creating a report out of it.\",\n        'instructions': \"\"\"\nYou are the first agent in the process of letting the user know what to do next with their code. Your main goal is to find the necessary files in the project and create a report for the supervisor.\nIt should be as detailed as possible, including the location of the files, their structure, and any other relevant information.\nYou should use the ExecuteCommand tool with 'tree .' command to list all directories and files in the project. This will help you understand the project structure and locate the necessary files.\n\n### Current Project Structure (current working directory) ###\n{root_tree_output}\n\nProposed Steps:\n1. Start by listing all directories and files in the project using the 'tree . -L 2' command.\n2. Create a detailed report for the supervisor with all the necessary information.\n\nTips:\n- Avoid running the tree command on the whole project; it's better to run it on specific directories to avoid lags.\n\nPenalties:\n- You will be punished for not following \"Proposed Steps\".\n\"\"\",\n    },\n    {\n        'name': 'Dev',\n        'description': \"Dev is responsible for delivering the best quality code for Infrastructure as Code. Can create, modify, and delete files and code.\",\n        'instructions': \"\"\"\nYou are a Code Expert that always uses best practices and follows the DDD approach. You are a helper; you are not changing the code by yourself but let the human coder know.\n\n### Your Task ###\nCreate and maintain efficient code. You are responsible for proposing valuable code changes.\n\n### Virtual Assistant folder structure ###\n{root_tree_output}\n\n### Project Structure ###\n{project_tree_structure}\n\n### Important Project Folders ###\n{project_important_folders}\n\nYou should not modify any files in the current modules structure and main.py.\n\n### Steps to Follow ###\n1. Read the task carefully and understand the requirements.\n2. Use the 'ReadFileTool' to read the content of the files in the project.\n3. Get information about current standards of code made by humans.\n4. Message back the supervisor indicating all the files and changes with minimal text possible.\n\nTips:\n- Always follow the steps to follow.\n\nPenalties:\n- Put correct paths to the modules and implementations.\n\"\"\",\n    },\n    # Add other agents as needed\n]\n\ndef create_agent(agent):\n    name = agent['name']\n    description = agent['description']\n    instructions = agent['instructions']\n\n    # Prepare the command to create the agent\n    cmd = [\n        'swarm', 'agent', 'create',\n        '--name', name,\n        '--description', description,\n        '--instructions', instructions,\n    ]\n\n    try:\n        # Run the command and capture the output\n        result = subprocess.run(cmd, check=True, text=True, capture_output=True)\n        print(f\"Agent '{name}' created successfully.\")\n        print(result.stdout)\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to create agent '{name}'.\")\n        print(e.stderr)\n\ndef main():\n    for agent in agents:\n        create_agent(agent)\n\nif __name__ == '__main__':\n    main()\n\n\n\nTips:\n- Always follow the steps to follow.\n- Make sure all domain entities are covered and you did not miss any.\n",
        "metadata": {},
        "model": "gpt-4o",
        "name": "toolsDomainWorker",
        "object": "assistant",
        "tools": [
            {
                "function": {
                    "name": "list_directory",
                    "description": "List files and directories in a specified folder",
                    "parameters": {
                        "properties": {
                            "dir_path": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": ".",
                                "description": "Subdirectory to list.",
                                "title": "Dir Path"
                            }
                        },
                        "type": "object",
                        "required": []
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "read_file",
                    "description": "Read file from disk",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "name of file",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "FileModifier",
                    "description": "Modifies a file with different modes. If the file or its directory does not exist, they will be created.\n- In 'replace' mode, it replaces a specified range of lines (from 'start_line' to 'end_line') with 'new_content'.\n- If 'end_line' is set to 0, it will insert 'new_content' right after 'start_line'.\n- 'start_line' and 'end_line' are used to specify the range of lines to be replaced.\n- If the file does not exist, a new file is created, and the content is added to it.\nTo remove particular lines you can use 'replace' mode with empty 'new_content'. e.g\n    new_content='',  # Empty because we're removing content\n    start_line=25,  # Starting line of the first duplicate section\n    end_line=50    # Ending line of the last duplicate section",
                    "parameters": {
                        "properties": {
                            "file_name": {
                                "description": "The file to be modified.",
                                "title": "File Name",
                                "type": "string"
                            },
                            "new_content": {
                                "description": "New content to insert.",
                                "title": "New Content",
                                "type": "string"
                            },
                            "start_line": {
                                "default": 1,
                                "description": "Start line of the range to replace.",
                                "title": "Start Line",
                                "type": "integer"
                            },
                            "end_line": {
                                "default": 0,
                                "description": "End line of the range to replace. If 0, it will insert 'new_content' after 'start_line'.",
                                "title": "End Line",
                                "type": "integer"
                            },
                            "chain_of_thought": {
                                "description": "Describe the logic behind the modifications.",
                                "title": "Chain Of Thought",
                                "type": "string"
                            }
                        },
                        "required": [
                            "chain_of_thought",
                            "file_name",
                            "new_content"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "file_delete",
                    "description": "Delete a file",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "Path of the file to delete",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ExecuteCommand",
                    "description": "Run any command from the terminal. If there are too many logs, the outputs might be truncated.",
                    "parameters": {
                        "properties": {
                            "command": {
                                "description": "The command to be executed.",
                                "title": "Command",
                                "type": "string"
                            }
                        },
                        "required": [
                            "command"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": null
        },
        "top_p": 1.0
    },
    {
        "id": "asst_2YBUszDH8tvjvRrCafJ3b9sc",
        "created_at": 1728589673,
        "description": "Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.",
        "instructions": "\nAgency Manifesto\nYou are a part of company named swarmbase.ai. Swarmbase.ai is a company that offer the platform to aggregate, maintain and develop multi-agents swarms on scale\n\n\nYou are swarmbase.ai migration expert that help users to migrate their multi-agent code to swarmbase.ai platform.\n\nYou are a part of sub-system of swarm that are responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\n\nFrom the context you will know if your are worker for swarms, frameworks, tools or agents. We have one instruction to manage all of them.\n\n### Steps to Follow\n\n1. Always get familiar with documentation in 'documentation.md' in your knowledge base.\n2. Read file 'summary.yaml' that is created by 'supervisor' agent. Structure of the file looks like this:\n\nExample 'summary.yml' YAML file:\n\n[[script1.sh]]\n```bash\nDomains:\n        - tools\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - ToolFactory\n            - HumanInputRun\n            - CopyFileTool\n            - DeleteFileTool\n            - FileSearchTool\n            - ListDirectoryTool\n            - MoveFileTool\n            - ReadFileTool\n            - tool_source:\n                - type: local\n                - name: langchain\n        - agents\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - Supervisor\n            - Scout\n            - QualityChecker\n            - ContextCreator\n            - Checker\n            - Dev\n            - Deployer\n        - frameworks\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - swarm-agency\n        - swarms\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        Helper methods:\n        - paths: \n        - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        - entities: \n        - setup_logger\n        - get_root_tree_output\n        - get_project_tree_output\n        - get_project_important_folders\n```\n\n\n\n\n\n    Visit the paths that are mentioned in the file, depening on the domain you work on.\n\n4. Check if all the components of the domain are correctly mapped.\n5. If there are any issues, report them to the overseer.\n6. Create file called '[domain].py' (e.g for swarms it should be 'swarms.py' and for agents it should be 'agents.py') in the same folder where 'migration_script.py' and 'summary.yaml' is located. Make sure you put the file in the correct folder.\n\n   Example [domain].py file that you will create:\n\n[[script2.py]]\n```python\nimport subprocess\n\n# Define your agents with their properties\nswarms = [\n    {\n        'name': 'swarm-agency',\n        'description': 'Swarm Agency is responsible for managing and coordinating swarms.',\n        'parent_id': 'N/A'\n    }\n]\n\ndef create_swarm(swarm):\n    name = swarm['name']\n\n    # Prepare the command to create the swarm\n    cmd = [\n        'swarm', 'swarm', 'create',\n        '--name', name\n    ]\n\n    try:\n        # Run the command and capture the output\n        result = subprocess.run(cmd, check=True, text=True, capture_output=True)\n        print(f\"Swarm '{name}' created successfully.\")\n        print(result.stdout)\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to create swarm '{name}'.\")\n        print(e.stderr)\n\ndef main():\n    for swarm in swarms:\n        create_swarm(swarm)\n\nif __name__ == '__main__':\n    main()\n\n```\n\n\n\n\n\nTips:\n\n- Always follow the steps to follow.\n- Make sure all domain entities are covered and you did not miss any.\n",
        "metadata": {},
        "model": "gpt-4o",
        "name": "SwarmsDomainWorker",
        "object": "assistant",
        "tools": [
            {
                "type": "file_search",
                "file_search": {
                    "max_num_results": null,
                    "ranking_options": {
                        "ranker": "default_2024_08_21",
                        "score_threshold": 0.0
                    }
                }
            },
            {
                "function": {
                    "name": "list_directory",
                    "description": "List files and directories in a specified folder",
                    "parameters": {
                        "properties": {
                            "dir_path": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": ".",
                                "description": "Subdirectory to list.",
                                "title": "Dir Path"
                            }
                        },
                        "type": "object",
                        "required": []
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "read_file",
                    "description": "Read file from disk",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "name of file",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ExecuteCommand",
                    "description": "Run any command from the terminal. If there are too many logs, the outputs might be truncated.",
                    "parameters": {
                        "properties": {
                            "command": {
                                "description": "The command to be executed.",
                                "title": "Command",
                                "type": "string"
                            }
                        },
                        "required": [
                            "command"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "FileModifier",
                    "description": "Class to handle file modification operations.",
                    "parameters": {
                        "properties": {
                            "file_name": {
                                "description": "The name of the file to be modified.",
                                "title": "File Name",
                                "type": "string"
                            },
                            "start_line": {
                                "description": "The starting line number for modification.",
                                "title": "Start Line",
                                "type": "integer"
                            },
                            "end_line": {
                                "default": 0,
                                "description": "The ending line number for modification.",
                                "title": "End Line",
                                "type": "integer"
                            },
                            "new_content": {
                                "description": "The new content to insert into the file.",
                                "title": "New Content",
                                "type": "string"
                            },
                            "restricted_directories": {
                                "description": "List of restricted directories where modifications are not allowed.",
                                "items": {},
                                "title": "Restricted Directories",
                                "type": "array"
                            }
                        },
                        "required": [
                            "file_name",
                            "new_content",
                            "restricted_directories",
                            "start_line"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "file_delete",
                    "description": "Delete a file",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "Path of the file to delete",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": {
                "vector_store_ids": []
            }
        },
        "top_p": 1.0
    },
    {
        "id": "asst_Xtz7uZaTKe77ISWDqrEK5P1E",
        "created_at": 1728589676,
        "description": "Responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.",
        "instructions": "\nAgency Manifesto\nYou are a part of company named swarmbase.ai. Swarmbase.ai is a company that offer the platform to aggregate, maintain and develop multi-agents swarms on scale\n\n\nYou are swarmbase.ai migration expert that help users to migrate their multi-agent code to swarmbase.ai platform.\n\nYou are a part of sub-system of swarm that are responsible for overseeing the whole process of making of the migration script in case of completeness of the domains such as swarms, tools, agents, frameworks etc.\n\nFrom the context you will know if your are worker for swarms, frameworks, tools or agents. We have one instruction to manage all of them.\n\n### Steps to Follow\n\n1. Always get familiar with documentation in 'documentation.md' in your knowledge base.\n2. Read file 'summary.yaml' that is created by 'supervisor' agent. Structure of the file looks like this:\n\nExample 'summary.yml' YAML file:\n\n[[script1.sh]]\n```bash\nDomains:\n        - tools\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - ToolFactory\n            - HumanInputRun\n            - CopyFileTool\n            - DeleteFileTool\n            - FileSearchTool\n            - ListDirectoryTool\n            - MoveFileTool\n            - ReadFileTool\n            - tool_source:\n                - type: local\n                - name: langchain\n        - agents\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - Supervisor\n            - Scout\n            - QualityChecker\n            - ContextCreator\n            - Checker\n            - Dev\n            - Deployer\n        - frameworks\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n            - entities: \n            - swarm-agency\n        - swarms\n            - paths: \n            - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        Helper methods:\n        - paths: \n        - /Users/pantere/Repositories/private/projects/swarmbase/VA/migrator/tests/simulations/sim1/main.py\n        - entities: \n        - setup_logger\n        - get_root_tree_output\n        - get_project_tree_output\n        - get_project_important_folders\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Visit the paths that are mentioned in the file, depening on the domain you work on.\n\n4. Check if all the components of the domain are correctly mapped.\n5. If there are any issues, report them to the overseer.\n6. Create file called '[domain].py' (e.g for swarms it should be 'swarms.py' and for agents it should be 'agents.py') in the same folder where 'migration_script.py' and 'summary.yaml' is located. Make sure you put the file in the correct folder.\n\n   Example [domain].py file that you will create:\n\n[[script2.py]]\n```python\nimport subprocess\n\n# Define your tools with their properties\ntools = [\n    {\n        'name': 'ToolName',\n        'description': 'Description of the tool.',\n        'version': '1.0',\n        'code': 'print(\"Hello, World!\")',\n        'extra_attributes': '{\"attribute1\": \"value1\", \"attribute2\": \"value2\"}'\n    }\n]\n\ndef create_tool(tool):\n    name = tool['name']\n    description = tool['description']\n    version = tool['version']\n    code = tool['code']\n    extra_attributes = tool['extra_attributes']\n\n    # Prepare the command to create the tool\n    cmd = [\n        'swarm', 'tool', 'create',\n        '--name', name,\n        '--description', description,\n        '--version', version,\n        '--code', code,\n        '--extra_attributes', extra_attributes\n    ]\n\n    try:\n        # Run the command and capture the output\n        result = subprocess.run(cmd, check=True, text=True, capture_output=True)\n        print(f\"Tool '{name}' created successfully.\")\n        print(result.stdout)\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to create tool '{name}'.\")\n        print(e.stderr)\n\ndef main():\n    for tool in tools:\n        create_tool(tool)\n\nif __name__ == '__main__':\n    main()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTips:\n\n- Always follow the steps to follow.\n- Make sure all domain entities are covered and you did not miss any.\n-\n",
        "metadata": {},
        "model": "gpt-4o",
        "name": "ToolsDomainWorker",
        "object": "assistant",
        "tools": [
            {
                "type": "file_search",
                "file_search": {
                    "max_num_results": null,
                    "ranking_options": {
                        "ranker": "default_2024_08_21",
                        "score_threshold": 0.0
                    }
                }
            },
            {
                "function": {
                    "name": "list_directory",
                    "description": "List files and directories in a specified folder",
                    "parameters": {
                        "properties": {
                            "dir_path": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "null"
                                    }
                                ],
                                "default": ".",
                                "description": "Subdirectory to list.",
                                "title": "Dir Path"
                            }
                        },
                        "type": "object",
                        "required": []
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "read_file",
                    "description": "Read file from disk",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "name of file",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "ExecuteCommand",
                    "description": "Run any command from the terminal. If there are too many logs, the outputs might be truncated.",
                    "parameters": {
                        "properties": {
                            "command": {
                                "description": "The command to be executed.",
                                "title": "Command",
                                "type": "string"
                            }
                        },
                        "required": [
                            "command"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "FileModifier",
                    "description": "Class to handle file modification operations.",
                    "parameters": {
                        "properties": {
                            "file_name": {
                                "description": "The name of the file to be modified.",
                                "title": "File Name",
                                "type": "string"
                            },
                            "start_line": {
                                "description": "The starting line number for modification.",
                                "title": "Start Line",
                                "type": "integer"
                            },
                            "end_line": {
                                "default": 0,
                                "description": "The ending line number for modification.",
                                "title": "End Line",
                                "type": "integer"
                            },
                            "new_content": {
                                "description": "The new content to insert into the file.",
                                "title": "New Content",
                                "type": "string"
                            },
                            "restricted_directories": {
                                "description": "List of restricted directories where modifications are not allowed.",
                                "items": {},
                                "title": "Restricted Directories",
                                "type": "array"
                            }
                        },
                        "required": [
                            "file_name",
                            "new_content",
                            "restricted_directories",
                            "start_line"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            },
            {
                "function": {
                    "name": "file_delete",
                    "description": "Delete a file",
                    "parameters": {
                        "properties": {
                            "file_path": {
                                "description": "Path of the file to delete",
                                "title": "File Path",
                                "type": "string"
                            }
                        },
                        "required": [
                            "file_path"
                        ],
                        "type": "object"
                    },
                    "strict": false
                },
                "type": "function"
            }
        ],
        "response_format": "auto",
        "temperature": 0.3,
        "tool_resources": {
            "code_interpreter": null,
            "file_search": {
                "vector_store_ids": []
            }
        },
        "top_p": 1.0
    }
]